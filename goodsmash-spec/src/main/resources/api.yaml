openapi: 3.0.2
info:
  version: 1.0.0
  title: Multiple APIs
  license:
    name: Poulet
servers:
  - url: 'http://localhost:{port}/api'
    variables:
      port:
        default: '6789'
    description: Dev
  - url: 'http://smash-back.herokuapp.com/api'
    description: prod

tags:
  - name: Smash
    description: Smash APIs

components:
  parameters:
    ## Path ##
    id:
      in: path
      required: true
      name: id
      description: element id
      schema:
        type: integer
        format: int64
    playlistId:
      in: path
      required: true
      name: playlistId
      description: element id
      schema:
        type: string
    name:
      in: path
      required: true
      name: name
      description: character name
      schema:
        type: string
  schemas:
    CategoryDto:
      title: Category
      type: string
      enum:
        - NORMAL
        - SILLY
        - HOT
        - BAR

    QuestionTypeDto:
      title: QuestionType
      type: string
      enum:
        - NORMAL
        - EVENT
        - EVENT_WITH_CHILD_RIGHT_AFTER
        - CUL_SEC

    QuestionDto:
      title: QuestionDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        key:
          type: string
        parentKey:
          type: string
        question:
          type: string
          maxLength: 1200
        nbPlayers:
          type: integer
          format: int32
        category:
          $ref: "#/components/schemas/CategoryDto"
        questionType:
          $ref: "#/components/schemas/QuestionTypeDto"
        children:
          type: array
          items:
            $ref: "#/components/schemas/QuestionDto"
        questionFromPicolo:
          type: boolean

    PlaylistDto:
      title: PlaylistDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        playlistId:
          type: string
        timecodes:
          type: array
          items:
            $ref: "#/components/schemas/TimecodeDto"
        uploaderName:
          type: string
        isPublic:
          type: boolean

    TimecodeDto:
      title: TimecodeDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        songId:
          type: string
        timecode:
          type: integer
          format: int64

    UserDto:
      title: UserDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        isApproved:
          type: boolean

    CharacterDto:
      title: CharacterDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tier:
          type: string
        characterWeight:
          $ref: "#/components/schemas/CharacterWeightDto"
        isFloaty:
          type: boolean
        image:
          type: string
          format: byte
        icon:
          type: string
          format: byte
        additionalFilters:
          type: array
          items:
            type: string
        skillRating:
          type: integer
          format: int32
        informations:
          type: array
          items:
            $ref: "#/components/schemas/InformationDto"
        bestMoves:
          type: array
          items:
            $ref: "#/components/schemas/BestMoveDto"
        confirms:
          type: array
          items:
            $ref: "#/components/schemas/ConfirmDto"
        combos:
          type: array
          items:
            $ref: "#/components/schemas/ComboDto"
        tierlists:
          type: array
          items:
            $ref: "#/components/schemas/TierlistDto"

    CharacterWeightDto:
      title: CharacterWeight
      type: string
      enum:
        - HEAVY
        - MEDIUM
        - LIGHT

    ComboDto:
      title: ComboDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        videoUrl:
          type: string
        description:
          type: string
        minPercent:
          type: integer
          format: int32
        maxPercent:
          type: integer
          format: int32
        moves:
          type: array
          items:
            $ref: "#/components/schemas/MoveDto"
        additionalFilters:
          type: array
          items:
            type: string

    MoveDto:
      title: MoveDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        inputs:
          type: array
          items:
            type: string

    ConfirmDto:
      title: ConfirmDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 1200
        description:
          type: string
        comment:
          type: string
        moves:
          type: array
          items:
            $ref: MoveDto
        confirmDetailsDtos:
          type: array
          items:
            $ref: "#/components/schemas/ConfirmDetailsDto"

    ConfirmDetailsDto:
      title: ConfirmDetailsDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        targetId:
          type: integer
          format: int64
        killPercentRage0:
          type: integer
          format: int32
        killPercentRage50:
          type: integer
          format: int32
        killPercentRage100:
          type: integer
          format: int32
        killPercentRage150:
          type: integer
          format: int32
        comment:
          type: string

    InformationDto:
      title: InformationDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        informationType:
          $ref: "#/components/schemas/InformationTypeDto"
        targetId:
          type: integer
          format: int64
        description:
          type: string
          maxLength: 1200

    InformationTypeDto:
      title: InformationType
      type: string
      enum:
        - ADVANTAGE
        - DISADVANTAGE
        - PRO
        - CON
        - GENERAL_DESCRIPTION

    BestMoveDto:
      title: BestMoveDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        videoUrl:
          type: string
        description:
          type: string
          maxLength: 1200

    TierlistDto:
      title: TierlistDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        tiers:
          type: array
          items:
            $ref: "#/components/schemas/TierDto"
        unusedCharacterIds:
          type: array
          items:
            type: integer
            format: int64

    TierDto:
      title: TierDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        rank:
          type: integer
          format: int32
        name:
          type: string
        color:
          type: string
        characterIds:
          type: array
          items:
            type: integer
            format: int64


    ImageDto:
      title: ImageDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        data:
          type: string
          format: byte

    MultipartCharacterDto:
      title: MultipartCharacterDto
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CharacterDto"
        image:
          type: string
          format: binary
        icon:
          type: string
          format: binary
paths:
  '/papicolo/questions':
    get:
      tags:
        - Papicolo
      summary: Get all questions
      operationId: getAll
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionDto'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Papicolo
      summary: create question
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDto'

  '/smash/auth/login':
    post:
      tags:
        - Auth
      summary: login to smash
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '500':
          $ref: '#/components/responses/500'

  '/smash/auth/logout':
    post:
      tags:
        - Auth
      summary: logout to smash
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '500':
          $ref: '#/components/responses/500'


  '/papicolo/questions/{id}':
    get:
      tags:
        - Papicolo
      summary: get question by id
      operationId: getById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDto'
    patch:
      tags:
        - Papicolo
      summary: patch question by id
      operationId: updateById
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionDto'
    delete:
      tags:
        - Papicolo
      summary: delete question by id
      operationId: deleteById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK

  '/papicolo/questions/import':
    post:
      tags:
        - Papicolo
      summary: Import all questions
      operationId: importAllQuestions
      responses:
        '200':
          description: OK
        '500':
          $ref: '#/components/responses/500'

  '/papicolo/questions/{id}/children/{childId}':
    delete:
      tags:
        - Papicolo
      summary: delete child question by id
      operationId: deleteChildById
      parameters:
        - $ref: '#/components/parameters/id'
        - in: path
          required: true
          name: childId
          description: child element id
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK

  '/pepites/playlists':
    get:
      tags:
        - Pepites
      summary: Get all playlists
      operationId: getAllPlaylists
      parameters:
        - in: query
          required: false
          name: uploaderName
          description: uploader name
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlaylistDto'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Pepites
      summary: create a playlist
      operationId: createPlaylist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDto'

  '/pepites/playlists/{playlistId}':
    get:
      tags:
        - Pepites
      summary: get playlist by playlistId
      operationId: getByPlaylistId
      parameters:
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDto'
    patch:
      tags:
        - Pepites
      summary: patch playlist by playlistId
      operationId: updateByPlaylistId
      parameters:
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlaylistDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDto'
    delete:
      tags:
        - Pepites
      summary: delete question by playlistId
      operationId: deleteByPlaylistId
      parameters:
        - $ref: '#/components/parameters/playlistId'
      responses:
        '200':
          description: OK

  '/pepites/playlists/{playlistId}/timecodes':
    post:
      tags:
        - Pepites
      summary: add timecode in playlist
      operationId: addTimeCodeInPlaylist
      parameters:
        - $ref: '#/components/parameters/playlistId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimecodeDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDto'

  '/pepites/playlists/{playlistId}/timecodes/{id}':
    delete:
      tags:
        - Pepites
      summary: delete timecode in playlist
      operationId: deleteTimecodeById
      parameters:
        - $ref: '#/components/parameters/playlistId'
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: OK

  '/smash/characters':
    get:
      tags:
        - Characters
      summary: Get all characters
      operationId: getAllCharacters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CharacterDto'
        '500':
          $ref: '#/components/responses/500'
    post:
      tags:
        - Characters
      summary: create a character
      operationId: createCharacter
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartCharacterDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDto'
  '/smash/characters/{name}':
    get:
      tags:
        - Characters
      summary: get character by name
      operationId: GetCharacterByName
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDto'
    patch:
      tags:
        - Characters
      summary: patch character by name
      operationId: updateByName
      parameters:
        - $ref: '#/components/parameters/name'
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartCharacterDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterDto'
    delete:
      tags:
        - Characters
      summary: delete character by name
      operationId: deleteByName
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        '200':
          description: OK

  '/tests':
    $ref: 'tests.yaml#/paths/~1tests'

